// Diary.jsx
/**
 * Component "Diary" cung c·∫•p giao di·ªán ƒë·ªÉ ng∆∞·ªùi d√πng vi·∫øt nh·∫≠t k√Ω h·∫±ng ng√†y.
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - Cho ph√©p ng∆∞·ªùi d√πng nh·∫≠p n·ªôi dung nh·∫≠t k√Ω v√† ch·ªçn t√¢m tr·∫°ng.
 * - G·ª≠i n·ªôi dung cho AI (Nart) ƒë·ªÉ nh·∫≠n ph·∫£n h·ªìi c·∫£m x√∫c t√≠ch c·ª±c.
 * - L∆∞u th√¥ng tin nh·∫≠t k√Ω v√†o Firebase Firestore.
 * - Hi·ªÉn th·ªã c√°c g·ª£i √Ω vi·∫øt nh·∫≠t k√Ω v√† ph·∫£n h·ªìi t·ª´ AI.
 * - Cho ph√©p ng∆∞·ªùi d√πng ƒëƒÉng xu·∫•t ho·∫∑c truy c·∫≠p l·ªãch s·ª≠ nh·∫≠t k√Ω ƒë√£ l∆∞u.
 */

import { useState, useRef, useEffect } from "react";
import { addDoc, collection } from "firebase/firestore";
import { auth, db } from "../firebase";
import { useNavigate } from "react-router-dom";
import { signOut } from "firebase/auth";
import { askGemini } from "../gemini"; // ‚úÖ T√≠ch h·ª£p AI Gemini
import "../App.css";

export default function Diary() {
  // Tr·∫°ng th√°i l∆∞u n·ªôi dung nh·∫≠t k√Ω, t√¢m tr·∫°ng v√† tr·∫°ng th√°i g·ª≠i form
  const [content, setContent] = useState("");
  const [mood, setMood] = useState("B√¨nh th∆∞·ªùng");
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Tr·∫°ng th√°i ph·∫£n h·ªìi t·ª´ AI Nart
  const [nartState, setNartState] = useState({
    isTyping: false,
    message: "Xin ch√†o! Nart ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n h√¥m nay ‚ù§Ô∏è",
    showSuggestions: false
  });

  const navigate = useNavigate();
  const textareaRef = useRef(null);
  const diaryFormRef = useRef(null);

  /**
   * T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao c·ªßa textarea theo n·ªôi dung nh·∫≠p
   */
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [content]);

  /**
   * G·ª≠i n·ªôi dung nh·∫≠t k√Ω ƒë·∫øn AI Gemini v√† c·∫≠p nh·∫≠t ph·∫£n h·ªìi
   * @param {string} userText - N·ªôi dung nh·∫≠t k√Ω c·ªßa ng∆∞·ªùi d√πng
   */
  const consultNart = async (userText) => {
    if (!userText.trim() || userText.length < 10) return;

    setNartState(prev => ({
      ...prev,
      isTyping: true,
      showSuggestions: false
    }));

    try {
      const prompt = `H√£y ph·∫£n h·ªìi c·∫£m x√∫c cho ƒëo·∫°n nh·∫≠t k√Ω sau m·ªôt c√°ch nh·∫π nh√†ng, ƒë·ªìng c·∫£m v√† c√≥ c·∫£m x√∫c t√≠ch c·ª±c:\n"${userText}"`;
      const aiReply = await askGemini(prompt);
      
      setNartState(prev => ({
        ...prev,
        message: aiReply,
        showSuggestions: true
      }));
    } catch (error) {
      setNartState(prev => ({
        ...prev,
        message: "Nart g·∫∑p ch√∫t tr·ª•c tr·∫∑c, nh∆∞ng v·∫´n ƒëang l·∫Øng nghe b·∫°n ‚ù§Ô∏è"
      }));
    } finally {
      setNartState(prev => ({ ...prev, isTyping: false }));
    }
  };

  // Danh s√°ch c√°c g·ª£i √Ω nhanh ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn khi vi·∫øt nh·∫≠t k√Ω
  const quickSuggestions = [
    { emoji: "üí°", text: "ƒêi·ªÅu ƒë√°ng nh·ªõ nh·∫•t h√¥m nay?" },
    { emoji: "üåª", text: "Vi·∫øt v·ªÅ kho·∫£nh kh·∫Øc l√†m b·∫°n m·ªâm c∆∞·ªùi" },
    { emoji: "ü§î", text: "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n trƒÉn tr·ªü?" }
  ];

  /**
   * X·ª≠ l√Ω g·ª≠i bi·ªÉu m·∫´u nh·∫≠t k√Ω: l∆∞u d·ªØ li·ªáu v√†o Firebase Firestore
   * @param {Event} e - S·ª± ki·ªán submit form
   */
  const handleSubmit = async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    if (!user || !content.trim()) return;

    setIsSubmitting(true);

    try {
      const now = new Date();
      await addDoc(collection(db, "diaries"), {
        userId: user.uid,
        date: now.toLocaleDateString("vi-VN"),
        time: now.toLocaleTimeString("vi-VN", { hour12: false }),
        timestamp: now,
        content,
        mood,
        hasAIResponse: nartState.message !== "Xin ch√†o! Nart ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n h√¥m nay ‚ù§Ô∏è"
      });

      setContent("");
      setMood("B√¨nh th∆∞·ªùng");
      setNartState({
        isTyping: false,
        message: "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! Nart ƒë√£ l∆∞u nh·∫≠t k√Ω th√†nh c√¥ng üåü",
        showSuggestions: false
      });

    } catch (error) {
      alert(`L·ªói khi l∆∞u: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  /**
   * X·ª≠ l√Ω ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng kh·ªèi h·ªá th·ªëng
   */
  const handleLogout = async () => {
    try {
      await signOut(auth);
      navigate("/");
    } catch (error) {
      alert(`L·ªói ƒëƒÉng xu·∫•t: ${error.message}`);
    }
  };

  return (
    <div className="diary-page">
      <div className="diary-box">
        <form onSubmit={handleSubmit} ref={diaryFormRef}>
          <div className="diary-header">
            <h2>Nh·∫≠t k√Ω h√¥m nay</h2>
            <div className="mood-selector">
              <label>üòä T√¢m tr·∫°ng:</label>
              <select 
                value={mood} 
                onChange={(e) => setMood(e.target.value)}
                disabled={isSubmitting}
              >
                <option>Ph·∫•n kh·ªüi</option>
                <option>Vui</option>
                <option>B√¨nh th∆∞·ªùng</option>
                <option>Bu·ªìn</option>
                <option>Lo l·∫Øng</option>
              </select>
            </div>
          </div>

          {/* Khu v·ª±c hi·ªÉn th·ªã chat v·ªõi AI Nart */}
          <div className={`nart-container ${nartState.isTyping ? "typing" : ""}`}>
            <div className="nart-avatar">‚ú®</div>
            <div className="nart-content">
              <div className="nart-message">
                {nartState.message}
                {nartState.isTyping && <span className="typing-indicator">...</span>}
              </div>
              
              {nartState.showSuggestions && (
                <div className="nart-suggestions">
                  {quickSuggestions.map((item, index) => (
                    <button
                      key={index}
                      type="button"
                      className="suggestion-btn"
                      onClick={() => setContent(prev => `${prev} ${item.text}`)}
                    >
                      {item.emoji} {item.text}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* √î nh·∫≠p n·ªôi dung nh·∫≠t k√Ω */}
          <textarea
            ref={textareaRef}
            placeholder="H√¥m nay c·ªßa b·∫°n th·∫ø n√†o? Vi·∫øt ra c·∫£m nh·∫≠n c·ªßa b·∫°n nh√©..."
            value={content}
            onChange={(e) => {
              setContent(e.target.value);
              if (e.target.value.length % 40 === 0) consultNart(e.target.value);
            }}
            disabled={isSubmitting}
            rows={5}
          />

          {/* C√°c n√∫t thao t√°c */}
          <div className="action-buttons">
            <button 
              type="submit" 
              className="save-btn"
              disabled={!content.trim() || isSubmitting}
            >
              {isSubmitting ? "ƒêang l∆∞u..." : "L∆∞u nh·∫≠t k√Ω"}
            </button>
            
            <button 
              type="button"
              className="history-btn"
              onClick={() => navigate("/history")}
            >
              Xem l·ªãch s·ª≠
            </button>
            
            <button 
              type="button"
              className="logout-btn"
              onClick={handleLogout}
            >
              ƒêƒÉng xu·∫•t
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

import { useState, useRef, useEffect } from "react";
import { addDoc, collection } from "firebase/firestore";
import { auth, db } from "../firebase";
import { useNavigate } from "react-router-dom";
import { signOut } from "firebase/auth";
import "../App.css";

export default function Diary() {
  // State ch√≠nh
  const [content, setContent] = useState("");
  const [mood, setMood] = useState("B√¨nh th∆∞·ªùng");
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // State cho AI Nart
  const [nartState, setNartState] = useState({
    isTyping: false,
    message: "Xin ch√†o! Nart ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n h√¥m nay ‚ù§Ô∏è",
    showSuggestions: false
  });

  const navigate = useNavigate();
  const textareaRef = useRef(null);
  const diaryFormRef = useRef(null);

  // T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu cao textarea
  useEffect(() => {
    if (textareaRef.current) {
      textareaRef.current.style.height = "auto";
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  }, [content]);

  // T∆∞∆°ng t√°c v·ªõi AI Nart
  const consultNart = async (userText) => {
    if (!userText.trim() || userText.length < 10) return;
    
    setNartState(prev => ({
      ...prev,
      isTyping: true,
      showSuggestions: false
    }));

    try {
      // Gi·∫£ l·∫≠p delay call API (th·ª±c t·∫ø s·∫Ω thay b·∫±ng API call th·∫≠t)
      await new Promise(resolve => setTimeout(resolve, 1200));
      
      const responses = {
        "Bu·ªìn": [
          "Nart th·∫•y h√¥m nay b·∫°n c√≥ ch√∫t bu·ªìn. Mu·ªën chia s·∫ª th√™m kh√¥ng?",
          "Nh·ªØng ng√†y bu·ªìn c≈©ng l√† c∆° h·ªôi ƒë·ªÉ y√™u th∆∞∆°ng b·∫£n th√¢n h∆°n üíñ",
          `T·ª´ "${extractMainTopic(userText)}" l√†m b·∫°n bu·ªìn √†? Nart lu√¥n s·∫µn s√†ng l·∫Øng nghe.`
        ],
        "Vui": [
          "Wow! Nghe vui qu√°! B·∫°n mu·ªën k·ªÉ th√™m chi ti·∫øt kh√¥ng?",
          `Nart th·∫•y b·∫°n nh·∫Øc ƒë·∫øn "${extractMainTopic(userText)}". Ch·∫Øc l√† tr·∫£i nghi·ªám tuy·ªát v·ªùi!`,
          "Ni·ªÅm vui c·ªßa b·∫°n c≈©ng l√†m Nart h·∫°nh ph√∫c theo üòä"
        ],
        "default": [
          "B·∫°n mu·ªën ph√¢n t√≠ch s√¢u h∆°n v·ªÅ c·∫£m x√∫c h√¥m nay kh√¥ng?",
          `Nart nh·∫≠n th·∫•y b·∫°n ƒë·ªÅ c·∫≠p ƒë·∫øn "${extractMainTopic(userText)}". ƒêi·ªÅu ƒë√≥ c√≥ √Ω nghƒ©a g√¨ v·ªõi b·∫°n?`,
          "M·ªói ng√†y ƒë·ªÅu l√† m·ªôt trang nh·∫≠t k√Ω ƒë·∫∑c bi·ªát. B·∫°n ƒëang vi·∫øt n√™n c√¢u chuy·ªán c·ªßa ch√≠nh m√¨nh ‚ú®"
        ]
      };

      const moodResponses = responses[mood] || responses.default;
      const randomResponse = moodResponses[Math.floor(Math.random() * moodResponses.length)];
      
      setNartState(prev => ({
        ...prev,
        message: randomResponse,
        showSuggestions: true
      }));

    } catch (error) {
      setNartState(prev => ({
        ...prev,
        message: "Nart g·∫∑p ch√∫t tr·ª•c tr·∫∑c, nh∆∞ng v·∫´n ƒëang l·∫Øng nghe b·∫°n ‚ù§Ô∏è"
      }));
    } finally {
      setNartState(prev => ({ ...prev, isTyping: false }));
    }
  };

  // H√†m tr√≠ch xu·∫•t ch·ªß ƒë·ªÅ ch√≠nh
  const extractMainTopic = (text) => {
    const words = text.toLowerCase().match(/\b(\w{4,})\b/g) || [];
    const stopWords = ["h√¥m", "nay", "c·∫£m", "th·∫•y"];
    const filtered = words.filter(word => !stopWords.includes(word));
    return filtered.slice(0, 2).join(", ") || "nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã";
  };

  // G·ª£i √Ω nhanh t·ª´ Nart
  const quickSuggestions = [
    { emoji: "üí°", text: "ƒêi·ªÅu ƒë√°ng nh·ªõ nh·∫•t h√¥m nay?" },
    { emoji: "üåª", text: "Vi·∫øt v·ªÅ kho·∫£nh kh·∫Øc l√†m b·∫°n m·ªâm c∆∞·ªùi" },
    { emoji: "ü§î", text: "ƒêi·ªÅu g√¨ khi·∫øn b·∫°n trƒÉn tr·ªü?" }
  ];

  // X·ª≠ l√Ω submit nh·∫≠t k√Ω
  const handleSubmit = async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    if (!user || !content.trim()) return;

    setIsSubmitting(true);

    try {
      const now = new Date();
      await addDoc(collection(db, "diaries"), {
        userId: user.uid,
        date: now.toLocaleDateString("vi-VN"),
        time: now.toLocaleTimeString("vi-VN", { hour12: false }),
        timestamp: now,
        content,
        mood,
        hasAIResponse: nartState.message !== "Xin ch√†o! Nart ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n h√¥m nay ‚ù§Ô∏è"
      });

      setContent("");
      setMood("B√¨nh th∆∞·ªùng");
      setNartState({
        isTyping: false,
        message: "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! Nart ƒë√£ l∆∞u nh·∫≠t k√Ω th√†nh c√¥ng üåü",
        showSuggestions: false
      });

    } catch (error) {
      alert(`L·ªói khi l∆∞u: ${error.message}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  // X·ª≠ l√Ω ƒëƒÉng xu·∫•t
  const handleLogout = async () => {
    try {
      await signOut(auth);
      navigate("/");
    } catch (error) {
      alert(`L·ªói ƒëƒÉng xu·∫•t: ${error.message}`);
    }
  };

  return (
    <div className="diary-page">
      <div className="diary-box">
        <form onSubmit={handleSubmit} ref={diaryFormRef}>
          <div className="diary-header">
            <h2>Nh·∫≠t k√Ω h√¥m nay</h2>
            <div className="mood-selector">
              <label>üòä T√¢m tr·∫°ng:</label>
              <select 
                value={mood} 
                onChange={(e) => setMood(e.target.value)}
                disabled={isSubmitting}
              >
                <option>Ph·∫•n kh·ªüi</option>
                <option>Vui</option>
                <option>B√¨nh th∆∞·ªùng</option>
                <option>Bu·ªìn</option>
                <option>Lo l·∫Øng</option>
              </select>
            </div>
          </div>

          {/* Khung chat v·ªõi Nart */}
          <div className={`nart-container ${nartState.isTyping ? "typing" : ""}`}>
            <div className="nart-avatar">‚ú®</div>
            <div className="nart-content">
              <div className="nart-message">
                {nartState.message}
                {nartState.isTyping && <span className="typing-indicator">...</span>}
              </div>
              
              {nartState.showSuggestions && (
                <div className="nart-suggestions">
                  {quickSuggestions.map((item, index) => (
                    <button
                      key={index}
                      type="button"
                      className="suggestion-btn"
                      onClick={() => setContent(prev => `${prev} ${item.text}`)}
                    >
                      {item.emoji} {item.text}
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>

          <textarea
            ref={textareaRef}
            placeholder="H√¥m nay c·ªßa b·∫°n th·∫ø n√†o? Vi·∫øt ra c·∫£m nh·∫≠n c·ªßa b·∫°n nh√©..."
            value={content}
            onChange={(e) => {
              setContent(e.target.value);
              if (e.target.value.length % 30 === 0) consultNart(e.target.value);
            }}
            disabled={isSubmitting}
            rows={5}
          />

          <div className="action-buttons">
            <button 
              type="submit" 
              className="save-btn"
              disabled={!content.trim() || isSubmitting}
            >
              {isSubmitting ? "ƒêang l∆∞u..." : "L∆∞u nh·∫≠t k√Ω"}
            </button>
            
            <button 
              type="button"
              className="history-btn"
              onClick={() => navigate("/history")}
            >
              Xem l·ªãch s·ª≠
            </button>
            
            <button 
              type="button"
              className="logout-btn"
              onClick={handleLogout}
            >
              ƒêƒÉng xu·∫•t
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}